const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';

async function testAuth() {
  console.log('üîê Probando sistema de autenticaci√≥n...\n');

  try {
    // 1. Probar registro de usuario
    console.log('1Ô∏è‚É£ Probando registro de usuario...');
    const registerData = {
      tenantId: 1,
      fullName: 'Usuario de Prueba Auth',
      email: 'test.auth@gruago.com',
      phone: '+52-555-TEST',
      password: 'password123'
    };

    let registerResponse;
    try {
      registerResponse = await axios.post(`${API_BASE_URL}/auth/register`, registerData);
      console.log('‚úÖ Usuario registrado exitosamente');
      console.log(`   ID: ${registerResponse.data.user.id}`);
      console.log(`   Email: ${registerResponse.data.user.email}`);
      console.log(`   Token generado: ${registerResponse.data.token ? 'S√≠' : 'No'}`);
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚ö†Ô∏è  Usuario ya existe, usando usuario existente');
      } else {
        throw error;
      }
    }

    console.log();

    // 2. Probar login
    console.log('2Ô∏è‚É£ Probando login...');
    const loginData = {
      email: 'test.auth@gruago.com',
      password: 'password123'
    };

    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, loginData);
    console.log('‚úÖ Login exitoso');
    console.log(`   Usuario: ${loginResponse.data.user.fullName}`);
    console.log(`   Empresa: ${loginResponse.data.user.tenantName}`);
    console.log(`   Rol: ${loginResponse.data.user.role}`);
    console.log(`   Token: ${loginResponse.data.token.substring(0, 20)}...`);

    const token = loginResponse.data.token;
    console.log();

    // 3. Probar acceso a perfil con token
    console.log('3Ô∏è‚É£ Probando acceso a perfil con token...');
    const profileResponse = await axios.get(`${API_BASE_URL}/auth/profile`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Perfil obtenido exitosamente');
    console.log(`   ID: ${profileResponse.data.user.id}`);
    console.log(`   Nombre: ${profileResponse.data.user.fullName}`);
    console.log(`   Email: ${profileResponse.data.user.email}`);
    console.log();

    // 4. Probar verificaci√≥n de token
    console.log('4Ô∏è‚É£ Probando verificaci√≥n de token...');
    const verifyResponse = await axios.get(`${API_BASE_URL}/auth/verify`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Token verificado exitosamente');
    console.log(`   Usuario verificado: ${verifyResponse.data.user.fullName}`);
    console.log();

    // 5. Probar acceso sin token (debe fallar)
    console.log('5Ô∏è‚É£ Probando acceso sin token (debe fallar)...');
    try {
      await axios.get(`${API_BASE_URL}/auth/profile`);
      console.log('‚ùå ERROR: Se permiti√≥ acceso sin token');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Acceso denegado correctamente sin token');
      } else {
        throw error;
      }
    }
    console.log();

    // 6. Probar acceso con token inv√°lido (debe fallar)
    console.log('6Ô∏è‚É£ Probando acceso con token inv√°lido (debe fallar)...');
    try {
      await axios.get(`${API_BASE_URL}/auth/profile`, {
        headers: {
          'Authorization': `Bearer token_invalido_123`
        }
      });
      console.log('‚ùå ERROR: Se permiti√≥ acceso con token inv√°lido');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Acceso denegado correctamente con token inv√°lido');
      } else {
        throw error;
      }
    }
    console.log();

    // 7. Probar login con credenciales incorrectas (debe fallar)
    console.log('7Ô∏è‚É£ Probando login con credenciales incorrectas (debe fallar)...');
    try {
      await axios.post(`${API_BASE_URL}/auth/login`, {
        email: 'test.auth@gruago.com',
        password: 'password_incorrecta'
      });
      console.log('‚ùå ERROR: Se permiti√≥ login con credenciales incorrectas');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Login denegado correctamente con credenciales incorrectas');
      } else {
        throw error;
      }
    }
    console.log();

    // 8. Probar logout
    console.log('8Ô∏è‚É£ Probando logout...');
    const logoutResponse = await axios.post(`${API_BASE_URL}/auth/logout`, {}, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Logout exitoso');
    console.log(`   Mensaje: ${logoutResponse.data.message}`);

    console.log('\nüéâ ¬°Todas las pruebas de autenticaci√≥n pasaron exitosamente!');
    console.log('\nüìä Resumen de pruebas:');
    console.log('  ‚úÖ Registro de usuario');
    console.log('  ‚úÖ Login con credenciales v√°lidas');
    console.log('  ‚úÖ Acceso a perfil con token v√°lido');
    console.log('  ‚úÖ Verificaci√≥n de token');
    console.log('  ‚úÖ Denegaci√≥n de acceso sin token');
    console.log('  ‚úÖ Denegaci√≥n de acceso con token inv√°lido');
    console.log('  ‚úÖ Denegaci√≥n de login con credenciales incorrectas');
    console.log('  ‚úÖ Logout exitoso');

  } catch (error) {
    console.error('‚ùå Error en las pruebas de autenticaci√≥n:', error.response?.data || error.message);
    if (error.response?.status === 400) {
      console.log('üí° Tip: Aseg√∫rate de que el servidor est√© corriendo y la base de datos conectada');
    }
  }
}

// Ejecutar las pruebas solo si el archivo se ejecuta directamente
if (require.main === module) {
  testAuth();
}

module.exports = { testAuth };
